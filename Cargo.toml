[package]
name = "scrape-ct-log"
description = "Tool to quickly and reliably mass-download entries from a Certificate Transparency log"
license = "GPL-3.0-only"
homepage = "https://github.com/mpalmer/scrape-ct-log"
repository = "https://github.com/mpalmer/scrape-ct-log"
include = [
        "/LICENCE",
        "/src/*.rs",
]
version = "0.0.0-git"
authors = ["Matt Palmer <matt@hezmatt.org>"]
keywords = ["security", "tls", "ssl", "https", "certificate"]
categories = ["command-line-utilities"]
edition = "2021"
# If this is changed, .github/workflows/{audit,qa}.yml build matrix needs updating as well
rust-version = "1.84.0"

[features]
# If adding features, especially default features, ensure you update the
# test matrices (matrixes?) in the CI workflows
default = ["cbor"]
cbor = ["dep:ciborium-ll", "dep:ciborium-io"]

[profile.release]
debug = 1

[dependencies]
base64 = "0.22"
# Needed until https://github.com/enarx/ciborium/pull/85 lands
ciborium-io = { version = "0.2.1", optional = true, features = ["std"] }
ciborium-ll = { version = "0.2.1", optional = true, features = ["std"] }
clap = { version = "4.0", features = ["derive"] }
ct-structs = { git = "https://github.com/mpalmer/ct-structs" }
gen_server = { git = "https://github.com/mpalmer/gen_server" }
log = "0.4"
num = "0.4"
rand = "0.8"
serde_json = "1.0"
flexi_logger = { version = "0.25", features = ["is-terminal"] }
thiserror = "1.0"
ureq = "2.6"
url = "2.3"

[dev-dependencies]
assert_cmd = "2.0"
bytes = "1.1"
ciborium = "0.2.1"
hex-literal = "0.4"
httptest = "0.15"
http = "0.2"
hyper = "0.14"
itertools = "0.10"
lazy_static = "1.4"
mktemp = "0.5"
predicates = "3.0"
regex = "1.8"
serde = "1.0"
x509-parser = "0.15"

[lints.rust]
unused = { level = "warn", priority = -128 }
keyword_idents = { level = "warn", priority = -127 }
future_incompatible = { level = "warn", priority = -100 }
let_underscore = { level = "warn", priority = -100 }

elided_lifetimes_in_paths = "warn"
explicit_outlives_requirements = "warn"
missing_debug_implementations = "warn"
non_ascii_idents = "warn"
noop_method_call = "warn"
single_use_lifetimes = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unreachable_pub = "warn"
unsafe_code = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_crate_dependencies = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
unused_qualifications = "warn"
dead_code = "warn"

[lints.clippy]
all = { level = "warn", priority = -100 }
cargo = { level = "warn", priority = -100 }
pedantic = { level = "warn", priority = -100 }

alloc_instead_of_core = "warn"
arithmetic_side_effects = "warn"
as_underscore = "warn"
assertions_on_result_states = "warn"
clone_on_ref_ptr = "warn"
dbg_macro = "warn"
decimal_literal_representation = "warn"
default_numeric_fallback = "warn"
deref_by_slicing = "warn"
else_if_without_else = "warn"
exhaustive_enums = "warn"
exhaustive_structs = "warn"
exit = "warn"
expect_used = "warn"
float_arithmetic = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
get_unwrap = "warn"
if_then_some_else_none = "warn"
indexing_slicing = "warn"
integer_division = "warn"
let_underscore_must_use = "warn"
lossy_float_literal = "warn"
map_err_ignore = "warn"
mixed_read_write_in_expression = "warn"
multiple_inherent_impl = "warn"
non_ascii_literal = "warn"
panic = "warn"
panic_in_result_fn = "warn"
partial_pub_fields = "warn"
print_stderr = "warn"
print_stdout = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_name_method = "warn"
self_named_module_files = "warn"
semicolon_inside_block = "warn"
separated_literal_suffix = "warn"
shadow_same = "warn"
shadow_unrelated = "warn"
string_slice = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
unnecessary_safety_comment = "warn"
unnecessary_safety_doc = "warn"
unneeded_field_pattern = "warn"
unreachable = "warn"
unwrap_used = "warn"
use_debug = "warn"
wildcard_enum_match_arm = "warn"
default_trait_access = "allow"
# Temporary until I wrote more docs
missing_errors_doc = "allow"
